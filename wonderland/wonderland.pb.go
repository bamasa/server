// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wonderland.proto

package wonderland

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Job_Status int32

const (
	Job_PENDING   Job_Status = 0
	Job_PULLED    Job_Status = 1
	Job_RUNNING   Job_Status = 2
	Job_FAILED    Job_Status = 3
	Job_COMPLETED Job_Status = 4
)

var Job_Status_name = map[int32]string{
	0: "PENDING",
	1: "PULLED",
	2: "RUNNING",
	3: "FAILED",
	4: "COMPLETED",
}

var Job_Status_value = map[string]int32{
	"PENDING":   0,
	"PULLED":    1,
	"RUNNING":   2,
	"FAILED":    3,
	"COMPLETED": 4,
}

func (x Job_Status) String() string {
	return proto.EnumName(Job_Status_name, int32(x))
}

func (Job_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ffb90dacc1dd129, []int{0, 0}
}

type Job struct {
	Project              string     `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Id                   uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Kind                 string     `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Status               Job_Status `protobuf:"varint,4,opt,name=status,proto3,enum=Job_Status" json:"status,omitempty"`
	Input                string     `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Output               string     `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	Metadata             string     `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffb90dacc1dd129, []int{0}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Job) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Job) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Job) GetStatus() Job_Status {
	if m != nil {
		return m.Status
	}
	return Job_PENDING
}

func (m *Job) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *Job) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Job) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type ListOfJobs struct {
	Jobs                 []*Job   `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOfJobs) Reset()         { *m = ListOfJobs{} }
func (m *ListOfJobs) String() string { return proto.CompactTextString(m) }
func (*ListOfJobs) ProtoMessage()    {}
func (*ListOfJobs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffb90dacc1dd129, []int{1}
}

func (m *ListOfJobs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOfJobs.Unmarshal(m, b)
}
func (m *ListOfJobs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOfJobs.Marshal(b, m, deterministic)
}
func (m *ListOfJobs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOfJobs.Merge(m, src)
}
func (m *ListOfJobs) XXX_Size() int {
	return xxx_messageInfo_ListOfJobs.Size(m)
}
func (m *ListOfJobs) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOfJobs.DiscardUnknown(m)
}

var xxx_messageInfo_ListOfJobs proto.InternalMessageInfo

func (m *ListOfJobs) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type RequestWithId struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestWithId) Reset()         { *m = RequestWithId{} }
func (m *RequestWithId) String() string { return proto.CompactTextString(m) }
func (*RequestWithId) ProtoMessage()    {}
func (*RequestWithId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffb90dacc1dd129, []int{2}
}

func (m *RequestWithId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestWithId.Unmarshal(m, b)
}
func (m *RequestWithId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestWithId.Marshal(b, m, deterministic)
}
func (m *RequestWithId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestWithId.Merge(m, src)
}
func (m *RequestWithId) XXX_Size() int {
	return xxx_messageInfo_RequestWithId.Size(m)
}
func (m *RequestWithId) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestWithId.DiscardUnknown(m)
}

var xxx_messageInfo_RequestWithId proto.InternalMessageInfo

func (m *RequestWithId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListJobsRequest struct {
	HowMany              uint32   `protobuf:"varint,1,opt,name=how_many,json=howMany,proto3" json:"how_many,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Kind                 string   `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsRequest) Reset()         { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()    {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffb90dacc1dd129, []int{3}
}

func (m *ListJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsRequest.Unmarshal(m, b)
}
func (m *ListJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsRequest.Merge(m, src)
}
func (m *ListJobsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobsRequest.Size(m)
}
func (m *ListJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsRequest proto.InternalMessageInfo

func (m *ListJobsRequest) GetHowMany() uint32 {
	if m != nil {
		return m.HowMany
	}
	return 0
}

func (m *ListJobsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListJobsRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func init() {
	proto.RegisterType((*Job)(nil), "Job")
	proto.RegisterType((*ListOfJobs)(nil), "ListOfJobs")
	proto.RegisterType((*RequestWithId)(nil), "RequestWithId")
	proto.RegisterType((*ListJobsRequest)(nil), "ListJobsRequest")
	proto.RegisterEnum("Job_Status", Job_Status_name, Job_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WonderlandClient is the client API for Wonderland service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WonderlandClient interface {
	CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	GetJob(ctx context.Context, in *RequestWithId, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error)
	ModifyJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	PullPendingJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error)
	DeleteJob(ctx context.Context, in *RequestWithId, opts ...grpc.CallOption) (*Job, error)
}

type wonderlandClient struct {
	cc *grpc.ClientConn
}

func NewWonderlandClient(cc *grpc.ClientConn) WonderlandClient {
	return &wonderlandClient{cc}
}

func (c *wonderlandClient) CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/Wonderland/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wonderlandClient) GetJob(ctx context.Context, in *RequestWithId, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/Wonderland/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wonderlandClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error) {
	out := new(ListOfJobs)
	err := c.cc.Invoke(ctx, "/Wonderland/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wonderlandClient) ModifyJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/Wonderland/ModifyJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wonderlandClient) PullPendingJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error) {
	out := new(ListOfJobs)
	err := c.cc.Invoke(ctx, "/Wonderland/PullPendingJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wonderlandClient) DeleteJob(ctx context.Context, in *RequestWithId, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/Wonderland/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WonderlandServer is the server API for Wonderland service.
type WonderlandServer interface {
	CreateJob(context.Context, *Job) (*Job, error)
	GetJob(context.Context, *RequestWithId) (*Job, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListOfJobs, error)
	ModifyJob(context.Context, *Job) (*Job, error)
	PullPendingJobs(context.Context, *ListJobsRequest) (*ListOfJobs, error)
	DeleteJob(context.Context, *RequestWithId) (*Job, error)
}

func RegisterWonderlandServer(s *grpc.Server, srv WonderlandServer) {
	s.RegisterService(&_Wonderland_serviceDesc, srv)
}

func _Wonderland_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WonderlandServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wonderland/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WonderlandServer).CreateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wonderland_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WonderlandServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wonderland/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WonderlandServer).GetJob(ctx, req.(*RequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wonderland_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WonderlandServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wonderland/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WonderlandServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wonderland_ModifyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WonderlandServer).ModifyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wonderland/ModifyJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WonderlandServer).ModifyJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wonderland_PullPendingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WonderlandServer).PullPendingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wonderland/PullPendingJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WonderlandServer).PullPendingJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wonderland_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WonderlandServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wonderland/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WonderlandServer).DeleteJob(ctx, req.(*RequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wonderland_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Wonderland",
	HandlerType: (*WonderlandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _Wonderland_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Wonderland_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Wonderland_ListJobs_Handler,
		},
		{
			MethodName: "ModifyJob",
			Handler:    _Wonderland_ModifyJob_Handler,
		},
		{
			MethodName: "PullPendingJobs",
			Handler:    _Wonderland_PullPendingJobs_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Wonderland_DeleteJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wonderland.proto",
}

func init() { proto.RegisterFile("wonderland.proto", fileDescriptor_5ffb90dacc1dd129) }

var fileDescriptor_5ffb90dacc1dd129 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0x8d, 0x1c, 0xd7, 0x49, 0x6e, 0x48, 0x6a, 0x2e, 0x63, 0xa8, 0x79, 0x99, 0x71, 0x61, 0x04,
	0x06, 0x7e, 0xc8, 0x7e, 0xc1, 0x68, 0xb2, 0x92, 0x90, 0xa4, 0xc6, 0x5b, 0x29, 0xec, 0x65, 0xc8,
	0x93, 0xba, 0xa8, 0x73, 0xa5, 0xcc, 0x96, 0x09, 0xf9, 0xcb, 0xfb, 0x0f, 0x83, 0x21, 0xc5, 0xc9,
	0xd6, 0x7d, 0xc0, 0x5e, 0x8c, 0xef, 0x39, 0xc7, 0x47, 0xc7, 0xe7, 0x0a, 0xc2, 0x9d, 0x56, 0x5c,
	0x94, 0x05, 0x53, 0x3c, 0xd9, 0x96, 0xda, 0xe8, 0xf8, 0x3b, 0x81, 0xf6, 0x42, 0xe7, 0x48, 0xa1,
	0xb3, 0x2d, 0xf5, 0x83, 0xf8, 0x64, 0x28, 0x89, 0xc8, 0xb8, 0x97, 0x1d, 0x47, 0x1c, 0x82, 0x27,
	0x39, 0xf5, 0x22, 0x32, 0xf6, 0x33, 0x4f, 0x72, 0x44, 0xf0, 0xbf, 0x48, 0xc5, 0x69, 0xdb, 0xc9,
	0xdc, 0x3b, 0x5e, 0x42, 0x50, 0x19, 0x66, 0xea, 0x8a, 0xfa, 0x11, 0x19, 0x0f, 0x27, 0xfd, 0x64,
	0xa1, 0xf3, 0xe4, 0x9d, 0x83, 0xb2, 0x86, 0xc2, 0x67, 0x70, 0x26, 0xd5, 0xb6, 0x36, 0xf4, 0xcc,
	0x7d, 0x79, 0x18, 0xf0, 0x39, 0x04, 0xba, 0x36, 0x16, 0x0e, 0x1c, 0xdc, 0x4c, 0x38, 0x82, 0xee,
	0xa3, 0x30, 0x8c, 0x33, 0xc3, 0x68, 0xc7, 0x31, 0xa7, 0x39, 0x9e, 0x43, 0x70, 0xf0, 0xc6, 0x3e,
	0x74, 0xd2, 0xd9, 0x7a, 0x3a, 0x5f, 0x5f, 0x87, 0x2d, 0x04, 0x08, 0xd2, 0xdb, 0xe5, 0x72, 0x36,
	0x0d, 0x89, 0x25, 0xb2, 0xdb, 0xf5, 0xda, 0x12, 0x9e, 0x25, 0xde, 0xbe, 0x99, 0x5b, 0xa2, 0x8d,
	0x03, 0xe8, 0x5d, 0xdd, 0xac, 0xd2, 0xe5, 0xec, 0xfd, 0x6c, 0x1a, 0xfa, 0xf1, 0x4b, 0x80, 0xa5,
	0xac, 0xcc, 0xcd, 0xfd, 0x42, 0xe7, 0x15, 0x52, 0xf0, 0x1f, 0x74, 0x5e, 0x51, 0x12, 0xb5, 0xc7,
	0xfd, 0x89, 0x6f, 0xff, 0x22, 0x73, 0x48, 0xfc, 0x02, 0x06, 0x99, 0xf8, 0x5a, 0x8b, 0xca, 0xdc,
	0x49, 0xb3, 0x99, 0xf3, 0xa6, 0x16, 0x72, 0xac, 0x25, 0xfe, 0x00, 0xe7, 0xd6, 0xc8, 0xda, 0x34,
	0x42, 0xbc, 0x80, 0xee, 0x46, 0xef, 0x3e, 0x3e, 0x32, 0xb5, 0x77, 0xc2, 0x41, 0xd6, 0xd9, 0xe8,
	0xdd, 0x8a, 0xa9, 0xfd, 0xaf, 0x75, 0x7b, 0x4f, 0xeb, 0xfe, 0x4b, 0xbd, 0x93, 0x6f, 0x04, 0xe0,
	0xee, 0xb4, 0x39, 0xbc, 0x80, 0xde, 0x55, 0x29, 0x98, 0x11, 0x76, 0x71, 0x2e, 0xe4, 0xc8, 0x3d,
	0xe3, 0x16, 0x46, 0x10, 0x5c, 0x0b, 0x1b, 0x02, 0x87, 0xc9, 0x93, 0xbc, 0x27, 0xc5, 0x2b, 0xe8,
	0x1e, 0x73, 0x62, 0x98, 0xfc, 0x16, 0x79, 0xd4, 0x4f, 0x7e, 0xb6, 0x11, 0xb7, 0xec, 0x49, 0x2b,
	0xcd, 0xe5, 0xfd, 0xfe, 0xcf, 0x93, 0x26, 0x70, 0x9e, 0xd6, 0x45, 0x91, 0x0a, 0xc5, 0xa5, 0xfa,
	0xfc, 0x7f, 0x76, 0x97, 0xd0, 0x9b, 0x8a, 0x42, 0x1c, 0x82, 0xff, 0x23, 0x60, 0x1e, 0xb8, 0x8b,
	0xf9, 0xfa, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xfc, 0x39, 0x4c, 0xac, 0x02, 0x00, 0x00,
}
